name: CI
on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        mode:
          - cgo
          - tinygo
          - wazero
        os:
          - macos-13
          - macos-14
          - ubuntu-22.04
          - windows-2022
        exclude:
          # Might be able to get it to work but currently fails mysteriously.
          - os: windows-2022
            mode: cgo
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: "^1.20"
          cache: true

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: setup aho-corasick for cgo
        if: ${{ matrix.mode == 'cgo' }}
        run: |
          rustup toolchain install stable${{ startsWith(matrix.os, 'windows') && '-gnu' || '' }}
          rustup default stable${{ startsWith(matrix.os, 'windows') && '-gnu' || '' }}
          cargo build --release
          ls target/release
        working-directory: buildtools/aho-corasick

      - name: add aho-corasick DLL to path
        if: ${{ startsWith(matrix.os, 'windows-') }}
        run: echo "${GITHUB_WORKSPACE}/buildtools/aho-corasick/target/release" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: setup tinygo
        if: ${{ matrix.mode == 'tinygo' }}
        uses: acifani/setup-tinygo@v1
        with:
          tinygo-version: 0.31.2
      - name: setup wasmtime for tinygo
        if: ${{ matrix.mode == 'tinygo' }}
        run: go install github.com/wasilibs/tools/cmd/wasmtime@875fe73f677c58d467ee373a9e00e6cb66b268f3

      - run: go run mage.go check
        env:
          WASI_TEST_MODE: ${{ matrix.mode }}
          LD_LIBRARY_PATH: ${{ startsWith(matrix.os, 'ubuntu-') && matrix.mode == 'cgo' && format('{0}/{1}', github.workspace, '/buildtools/aho-corasick/target/release') || '' }}

  # Runs tests using wazero inside a minimal golang docker image. This makes sure the code builds
  # even when there is no C toolchain available. It is possible for code to work fine with CGO_ENABLED=0
  # but not build without a C toolchain available, e.g. if C source files are checked into the repo
  # without a build tag to exclude them from pure-Go builds.
  docker-build:
    runs-on: ubuntu-22.04
    container:
      image: golang:alpine
    steps:
      - uses: actions/checkout@v3

      - run: if command -v gcc &> /dev/null; then echo "GCC found but not expected"; exit 321; fi

      - run: go run mage.go test
